<?xml version="1.0"?>

<robot name="auv" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="common_properties.xacro" />
    <xacro:include filename="auv_basic2.xacro" />

    <gazebo>
        <plugin
            filename="gz-sim-hydrodynamics-system"
            name="gz::sim::systems::Hydrodynamics">
            <link_name>base_link</link_name>
            <xDotU>-1.0</xDotU>
            <yDotV>-5</yDotV>
            <zDotW>-5</zDotW>
            <kDotP>0</kDotP>
            <mDotQ>0</mDotQ>
            <nDotR>0</nDotR>
            <xU>-5</xU>
            <yV>-100</yV>
            <zW>-30</zW>
            <kP>0</kP>
            <mQ>0</mQ>
            <nR>0</nR>
            <xUabsU>-4.6</xUabsU>
            <yVabsV>-60</yVabsV>
            <zWabsW>-60</zWabsW>
            <kPabsP>-0.5</kPabsP>
            <mQabsQ>-200</mQabsQ>
            <nRabsR>-20</nRabsR>
        </plugin>
    </gazebo>

    <ros2_control name="Auv" type="system">
        <hardware>
            <plugin>gz_ros2_control/GazeboSimSystem</plugin>
            <!-- <plugin>mock_components/GenericSystem</plugin> -->
        </hardware>

        <joint name="cylinder_thruster_joint">
            <command_interface name="velocity" />
            <state_interface name="position" />
            <state_interface name="velocity" />
        </joint>
    </ros2_control>

    <gazebo>
        <plugin filename="gz_ros2_control-system" name="gz_ros2_control::GazeboSimROS2ControlPlugin">
            <parameters>$(find custom_robot_bringup)/config/auv_controllers.yaml</parameters>
        </plugin>
        <!-- </gazebo> -->


        <!-- <plugin
      filename="gz-sim-thruster-system" 
      name="gz::sim::systems::Thruster"> -->

        <!-- <joint_name>${namespace}/${name}_engine_propeller_joint</joint_name>  
      <thrust_coefficient>0.004422</thrust_coefficient>  
      <fluid_density>1000</fluid_density>  
      <propeller_diameter>0.2</propeller_diameter>  
      <velocity_control>true</velocity_control>  
      
      
      <max_thrust_cmd>${((x_u + x_uu * max_velocity_mps) * max_velocity_mps)/ 2}</max_thrust_cmd>
      
      <namespace>${namespace}</namespace>  
      <topic>thrusters/${name}/thrust</topic>  
      <name>${name}</name>  -->

        <!-- gz::sim::systems::Thruster -->
        <!-- <gazebo> -->
        <plugin
            filename="gz-sim-thruster-system"
            name="gz::sim::systems::Thruster"
        >
            <!-- <plugin name="thruster" filename="libgz-sim-systems-thruster.so"> -->
            <joint_name>cylinder_thruster_joint</joint_name>      <!-- the joint you created in your URDF -->
            <topic>thruster0/cmd_thrust</topic>           <!-- plugin will listen on this gz topic -->
            <use_angvel_cmd>false</use_angvel_cmd>        <!-- we send thrust (N) -->
            <velocity_control>false</velocity_control>    <!-- let plugin apply wrenches directly -->
            <thrust_coefficient>1.0</thrust_coefficient>
            <fluid_density>1000</fluid_density>
            <propeller_diameter>0.2</propeller_diameter>
            <velocity_control>true</velocity_control>
            <max_thrust_cmd>50</max_thrust_cmd>
            <name>auv</name>
        </plugin>
    </gazebo>

    <!-- <gazebo>
        <plugin
            filename="gz-sim-joint-state-publisher-system"
            name="gz::sim::systems::JointStatePublisher"
        >
            <joint_name>base_left_wheel_joint</joint_name>
            <joint_name>base_right_wheel_joint</joint_name>
            <joint_name>arm_base_forearm_joint</joint_name>
            <joint_name>forearm_hand_joint</joint_name>
        </plugin>
    </gazebo> -->

</robot>